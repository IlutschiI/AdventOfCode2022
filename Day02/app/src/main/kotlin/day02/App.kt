/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day02

fun main() {

    var input = object {}::class.java.getResource("/input").readText()

    var winningTable = mapOf(
            1 to 6,
            -2 to 6,
            2 to 0,
            -1 to 0,
            0 to 3
    )

    var winningShapes = mapOf(
            'A' to 'C',
            'B' to 'A',
            'C' to 'B'
    )

    var part1 = input
            .split("\n")
            .asSequence()
            .map { match ->     // convert input to chars
                match
                        .split(" ")
                        .map { choice ->
                            choice.first()
                        }
            }
            .map {   // normalize second field of input
                it[0] to it[1] - 23
            }
            .map {// calculate round win and points for chosen shape
                it.second - it.first to (it.second - 64).code
            }
            .map {// get points for round win and add points for shape
                winningTable[it.first]!!.plus(it.second)
            }
            .sum()

    var part2 = input
            .split("\n")
            .asSequence()
            .map { match ->     // convert input to chars
                match
                        .split(" ")
                        .map { choice ->
                            choice.first()
                        }
            }
            .map {// normalize second field of input (X->lose, Y->draw, Z->win)
                var choice = when(it[1]){
                    'X' -> {
                        var keyToLose = winningShapes[it[0]]!!
                        keyToLose
                    }
                    'Y' -> {
                        var keyToDraw = it[0]
                        keyToDraw
                    }
                    'Z' -> {
                        var keyToWin = winningShapes.entries.first { entry ->
                            entry.value==it[0]
                        }.key
                        keyToWin
                    }
                    else -> {' '}
                }
                it[0] to choice
            }
            .map {// calculate round win and points for chosen shape
                it.second - it.first to (it.second - 64).code
            }
            .map {// get points for round win and add points for shape
                winningTable[it.first]!!.plus(it.second)
            }
            .sum()

    println("part1: $part1")
    println("part2: $part2")
}
